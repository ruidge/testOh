/**
 *
 * Preferences
 *
 * 用户首选项为应用提供Key-Value键值型的数据处理能力，支持应用持久化轻量级数据，并对其修改和查询。
 * 当用户希望有一个全局唯一存储的地方，可以采用用户首选项来进行存储。
 * Preferences会将该数据缓存在内存中，当用户读取的时候，能够快速从内存中获取数据，当需要持久化时可以使用flush接口将内存中的数据写入持久化文件中。
 * Preferences会随着存放的数据量越多而导致应用占用的内存越大，因此，Preferences不适合存放过多的数据，也不支持通过配置加密，适用的场景一般为应用保存用户的个性化设置（字体大小，是否开启夜间模式）等。
 *
 * 1.Key键为string类型，要求非空且长度不超过80个字节。
 * 2.如果Value值为string类型，请使用UTF-8编码格式，可以为空，不为空时长度不超过8192个字节。
 * 3.内存会随着存储数据量的增大而增大，所以存储的数据量应该是轻量级的，建议存储的数据不超过一万条，否则会在内存方面产生较大的开销。
 *
 *
 * KV
 * 键值型数据库存储键值对形式的数据，当需要存储的数据没有复杂的关系模型，比如存储商品名称及对应价格、员工工号及今日是否已出勤等，
 * 由于数据复杂度低，更容易兼容不同数据库版本和设备类型，因此推荐使用键值型数据库持久化此类数据。
 * 1.设备协同数据库，针对每条记录，Key的长度≤896 Byte，Value的长度<4 MB。
 * 2.单版本数据库，针对每条记录，Key的长度≤1 KB，Value的长度<4 MB。
 * 3.每个应用程序最多支持同时打开16个键值型分布式数据库。
 * 4.键值型数据库事件回调方法中不允许进行阻塞操作，例如修改UI组件。
 *
 *
 */